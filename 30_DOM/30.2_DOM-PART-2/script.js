



// _____JavaScript HTML DOM - Changing CSS________


/* The HTML DOM allows JavaScript to change the style of HTML elements.

Changing HTML Style
To change the style of an HTML element, use this syntax:

document.getElementById(id).style.property = new style */

document.getElementById("p2").style.color = "blue";



// Using Events
// The HTML DOM allows you to execute code when an event occurs.

// Events are generated by the browser when "things happen" to HTML elements:

// An element is clicked on
// The page has loaded
// Input fields are changed
// You will learn more about events in the next chapter of this tutorial.

// This example changes the style of the HTML element with id="id1", when the user clicks a button:



{/* <p id="p2">Hello World!</p>
<h1 id="id1">My Heading 1</h1>
<button type="button"
onclick="document.getElementById('id1').style.color = 'red'">
Click Me!</button> */}

// const myDiv = document.getElementById('myDiv');

//         // Modify CSS styles
//         myDiv.style.backgroundColor = 'blue';
//         myDiv.style.width = '200px';
//         myDiv.style.height = '200px';
// =================================================================

/* To add multiple styles to an element in JavaScript, you can concatenate multiple CSS property-value pairs into a single string and then assign it to the style property of the element. Here's how you can do it: */


 // Access the element
 const myDiv = document.getElementById('myDiv');

 // Define multiple CSS styles as a string
 const multipleStyles = 'background-color: red; width: 200px; height: 200px;';

 // Assign the styles to the element
 myDiv.style.cssText = multipleStyles;


// =================================================================


//   Description
// The className property sets or returns an element's class attribute.


window.onscroll = function() {myFunction()};

function myFunction() {
  if (document.documentElement.scrollTop > 50) {
    document.getElementById("myP").className = "test";
  } else {
    document.getElementById("myP").className = "";
  }
}


/* .className:
.className is a property of DOM elements that represents the value of the class attribute of an element as a single string. You can use .className to get or set the classes of an element. */


// Get the value of the class attribute
const classNameValue = element.className;

// Set the value of the class attribute
element.className = 'newClass';


/* .classList:
.classList is a property of DOM elements that returns a collection of the element's classes as a DOMTokenList object. This object provides methods for adding, removing, toggling, and checking the presence of classes. */

// Add a class to the element
element.classList.add('newClass');

// Remove a class from the element
element.classList.remove('oldClass');

// Toggle a class on the element
element.classList.toggle('active');

// Check if the element has a specific class
const hasClass = element.classList.contains('className');

/* 
Key Differences:
Complexity: .className is a simple string property, while .classList provides a more sophisticated API with methods for class manipulation.

Flexibility: .classList allows you to perform more specific operations like toggling classes or checking if an element has a particular class.

Browser Support: .classList is not supported in older versions of Internet Explorer (prior to IE10), whereas .className is widely supported. */