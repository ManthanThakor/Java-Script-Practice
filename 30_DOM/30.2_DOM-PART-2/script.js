



// _____JavaScript HTML DOM - Changing CSS________


/* The HTML DOM allows JavaScript to change the style of HTML elements.

Changing HTML Style
To change the style of an HTML element, use this syntax:

document.getElementById(id).style.property = new style */

document.getElementById("p2").style.color = "blue";



// Using Events
// The HTML DOM allows you to execute code when an event occurs.

// Events are generated by the browser when "things happen" to HTML elements:

// An element is clicked on
// The page has loaded
// Input fields are changed
// You will learn more about events in the next chapter of this tutorial.

// This example changes the style of the HTML element with id="id1", when the user clicks a button:



{/* <p id="p2">Hello World!</p>
<h1 id="id1">My Heading 1</h1>
<button type="button"
onclick="document.getElementById('id1').style.color = 'red'">
Click Me!</button> */}

// const myDiv = document.getElementById('myDiv');

//         // Modify CSS styles
//         myDiv.style.backgroundColor = 'blue';
//         myDiv.style.width = '200px';
//         myDiv.style.height = '200px';
// =================================================================

/* To add multiple styles to an element in JavaScript, you can concatenate multiple CSS property-value pairs into a single string and then assign it to the style property of the element. Here's how you can do it: */


 // Access the element
 const myDiv = document.getElementById('myDiv');

 // Define multiple CSS styles as a string
 const multipleStyles = 'background-color: red; width: 200px; height: 200px;';

 // Assign the styles to the element
 myDiv.style.cssText = multipleStyles;


// =================================================================


//   Description
// The className property sets or returns an element's class attribute.


window.onscroll = function() {myFunction()};

function myFunction() {
  if (document.documentElement.scrollTop > 50) {
    document.getElementById("myP").className = "test";
  } else {
    document.getElementById("myP").className = "";
  }
}


/* .className:
.className is a property of DOM elements that represents the value of the class attribute of an element as a single string. You can use .className to get or set the classes of an element. */


// Get the value of the class attribute
// const classNameValue = element.className;

// Set the value of the class attribute
// element.className = 'newClass';


/* .classList:
.classList is a property of DOM elements that returns a collection of the element's classes as a DOMTokenList object. This object provides methods for adding, removing, toggling, and checking the presence of classes. */

// Add a class to the element
// element.classList.add('newClass');

// Remove a class from the element
// element.classList.remove('oldClass');

// Toggle a class on the element
// element.classList.toggle('active');

// Check if the element has a specific class
// const hasClass = element.classList.contains('className');

/* 
Key Differences:
Complexity: .className is a simple string property, while .classList provides a more sophisticated API with methods for class manipulation.

Flexibility: .classList allows you to perform more specific operations like toggling classes or checking if an element has a particular class.

Browser Support: .classList is not supported in older versions of Internet Explorer (prior to IE10), whereas .className is widely supported. */



// class list 

// document.querySelector('#dam').classList.add('className');

document.querySelector("#dampp").classList.add("asaa");



// document.querySelector('#dam').classList.remove('className');

function removeClass() {
    // Select the element with ID "dam" and remove class "className"
    document.querySelector('#dam').classList.remove('className');
}


// document.querySelector('#dam').classList.toggle('className');


// document.querySelector('#dam').classList.contains('className');


// document.querySelector('#dam').classList.item(index);


// document.querySelector('#dam').classList.length;


// document.querySelector('#dam').classList.value;


// document.querySelector('#dam').classList.forEach(callback);

// classList
// classList.add('className');
// classList.remove('className');
// classList.toggle('className');
// classList.contains('className');
// classList.item(index)
// classList.length
// classList.value
// classList.forEach(callback)

// =================================================================




// _______JavaScript HTML DOM Events______


// https://www.w3schools.com/js/js_htmldom_events.asp

// https://youtu.be/R7mu7nKFc7w?si=R6taBgfUlafvrcoL 

// Reacting to Events
// A JavaScript can be executed when an event occurs, like when a user clicks on an HTML element.

// To execute code when a user clicks on an element, add JavaScript code to an HTML event attribute:

// onclick=JavaScript
// Examples of HTML events:

// When a user clicks the mouse
// When a web page has loaded
// When an image has been loaded
// When the mouse moves over an element
// When an input field is changed
// When an HTML form is submitted
// When a user strokes a key


// $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

// JavaScript HTML DOM EventListener

// $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$


// https://youtu.be/NhRhrAziBRU?si=OjlMvG1nT8bzVSJH 

/* The addEventListener() method
Example
Add an event listener that fires when a user clicks a button: */

document.getElementById("myBtn").addEventListener("click", displayDate);

function displayDate() {
  document.getElementById("demoA").innerHTML = Date();
}



/* The addEventListener() method attaches an event handler to the specified element.

The addEventListener() method attaches an event handler to an element without overwriting existing event handlers.

You can add many event handlers to one element.

You can add many event handlers of the same type to one element, i.e two "click" events.

You can add event listeners to any DOM object not only HTML elements. i.e the window object.

The addEventListener() method makes it easier to control how the event reacts to bubbling.

When using the addEventListener() method, the JavaScript is separated from the HTML markup, for better readability and allows you to add event listeners even when you do not control the HTML markup.

You can easily remove an event listener by using the removeEventListener() method.

Syntax
element.addEventListener(event, function, useCapture);
The first parameter is the type of the event (like "click" or "mousedown" or any other HTML DOM Event.)

The second parameter is the function we want to call when the event occurs.

The third parameter is a boolean value specifying whether to use event bubbling or event capturing. This parameter is optional.

Note that you don't use the "on" prefix for the event; use "click" instead of "onclick". */

// ============================================================================= 


// Add an Event Handler to an Element

// SYNTAX  :
/*  document.querySelector("").addEventListener("click", functionName);
 function functionName(){
    statement
 } */

 

document.getElementById("btn").addEventListener("click", xxx);

function xxx() {
  alert ("Hello World!");
}